import sqlite3

DATABASE = 'malware_urls.db'

def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS malware_urls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT NOT NULL,
            is_malicious BOOLEAN NOT NULL
        )
    ''')
    conn.commit()
    cursor.close()
    conn.close()

def insert_sample_urls():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    sample_urls = [
        ('http://example.com', False),
        ('http://malicious.com', True)
    ]
    cursor.executemany("INSERT INTO malware_urls (url, is_malicious) VALUES (?, ?)", sample_urls)
    conn.commit()
    cursor.close()
    conn.close()

def batch_update_urls(url_list):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.executemany('INSERT OR REPLACE INTO malware_urls (url, is_malicious) VALUES (?, ?)', url_list)
    conn.commit()
    cursor.close()
    conn.close()


def check_url(url):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT is_malicious FROM malware_urls WHERE url = ?', (url,))
    result = cursor.fetchone()
    print(f"Checking URL: {url}, Result: {result}")  # Debugging output
    cursor.close()
    conn.close()
    return result[0] if result else False

if __name__ == '__main__':
    init_db()
    insert_sample_urls()
    print("Database initialized and sample data inserted.")
    # Add manual test for database function
    print(check_url('http://example.com'))  # Should print False
    print(check_url('http://malicious.com'))  # Should print True
    print(check_url('http://nonexistent.com'))  # Should print False
