# I've opted for sqlite to keep things light and tidy. As a longterm solution, I would opt for
# a more involved database solution, configure users and passwords and connect the application to it
import sqlite3 

# Database file location
DATABASE = 'malware_urls.db'

def init_db():
    """
    Initialize the database.
    Creates the malware_urls table if it doesn't already exist.
    """
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS malware_urls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT NOT NULL,
            is_malicious BOOLEAN NOT NULL
        )
    ''')
    conn.commit()
    cursor.close()
    conn.close()

def check_url(url):
    """
    Check if a URL is malicious.
    Queries the database to see if the URL is listed as malicious.
    
    :param url: The URL to check.
    :return: True if the URL is malicious, False otherwise.
    """
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT is_malicious FROM malware_urls WHERE url = ?', (url,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    return result is not None and result[0]

def populate_sample_data():
    """
    Populate the database with sample data.
    Inserts a set of sample URLs with their malicious status into the database.
    """
    sample_urls = [
        ('example.com', False),
        ('malicious.com', True),
        ('test.com', False),
        ('badurl.com', True),
        ('safeurl.com', False),
        ('dangerous.com', True),
        ('harmless.com', False),
        ('evil.com', True),
        ('benign.com', False),
        ('threat.com', True)
    ]
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.executemany('INSERT INTO malware_urls (url, is_malicious) VALUES (?, ?)', sample_urls)
    conn.commit()
    cursor.close()
    conn.close()

if __name__ == '__main__':
    # Initialize the database and populate it with sample data
    init_db()
    populate_sample_data()
    print("Database initialized and sample data inserted.")

