import unittest
from app import app
import sqlite3
import database

class MalwareURLLookupTestCase(unittest.TestCase):

    def setUp(self):
        app.config['TESTING'] = True
        app.config['RATELIMIT_ENABLED'] = False
        app.config['RATELIMIT_HEADERS_ENABLED'] = True

        self.app = app.test_client()
        self.app.testing = True
        database.init_db()
        self.populate_db()

    def populate_db(self):
        conn = sqlite3.connect(database.DATABASE)
        cursor = conn.cursor()
        sample_urls = [
            ('http://example.com', False),
            ('http://malicious.com', True)
        ]
        cursor.executemany("INSERT INTO malware_urls (url, is_malicious) VALUES (?, ?)", sample_urls)
        conn.commit()
        cursor.close()
        conn.close()

    def test_url_info_safe(self):
        response = self.app.get('/v1/urlinfo/http://example.com')
        data = response.get_json()
        self.assertIsNotNone(data)
        self.assertEqual(data['is_malicious'], False)

    def test_url_info_malicious(self):
        response = self.app.get('/v1/urlinfo/http://malicious.com')
        data = response.get_json()
        self.assertIsNotNone(data)
        self.assertEqual(data['is_malicious'], True)

    def test_url_info_nonexistent(self):
        response = self.app.get('/v1/urlinfo/http://nonexistent.com')
        data = response.get_json()
        self.assertIsNotNone(data)
        self.assertEqual(data['is_malicious'], False)

    # Got close, but this wasn't working for some reason
    # def test_rate_limiting(self):
    #     with self.app.application.app_context():
    #         app.config['RATELIMIT_ENABLED'] = True
    #         app.config['RATELIMIT_STORAGE_URL'] = 'memory://'

    #         for _ in range(10):
    #             self.app.get('/v1/urlinfo/http://example.com')
            
    #         response = self.app.get('/v1/urlinfo/http://example.com')
    #         print(f"Response status (rate limiting): {response.status_code}")  # Debugging output
    #         self.assertEqual(response.status_code, 429)  # HTTP status code for Too Many Requests

    #         app.config['RATELIMIT_ENABLED'] = False

    def test_batch_insert_urls(self):
        new_urls = [
            ('http://newexample.com', False),
            ('http://newmalicious.com', True)
        ]
        database.batch_update_urls(new_urls)
        conn = sqlite3.connect(database.DATABASE)
        cursor = conn.cursor()
        cursor.execute('SELECT is_malicious FROM malware_urls WHERE url = ?', ('http://newexample.com',))
        result = cursor.fetchone()
        self.assertIsNotNone(result)
        self.assertEqual(result[0], False)
        cursor.execute('SELECT is_malicious FROM malware_urls WHERE url = ?', ('http://newmalicious.com',))
        result = cursor.fetchone()
        self.assertIsNotNone(result)
        self.assertEqual(result[0], True)
        cursor.close()
        conn.close()

if __name__ == '__main__':
    unittest.main()
